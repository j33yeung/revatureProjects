package com.revature.bankingapp.BankUser;

import com.revature.bankingapp.Exceptions.AccountNotExistException;
import com.revature.bankingapp.Exceptions.ApplicationNotSentException;
import com.revature.bankingapp.Exceptions.DuplicateFoundException;
import com.revature.bankingapp.Exceptions.UserNotFoundException;
import com.revature.bankingapp.Main;
import com.revature.bankingapp.dao.BankAccount;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import java.util.HashSet;
import java.util.Set;

/**
 * Service Implementation of CustomerBankUser - Created by: Jason Yeung - Edited on: April 20, 2022
 */
public class EmployeeBankUserServiceImpl implements EmployeeBankUserService {

    final Logger logger = LoggerFactory.getLogger(Main.class);

//    private BankAccountRepository repo;
//    private DBConnector dbConnector;

    public EmployeeBankUserServiceImpl() {

    }

    /**
     * reviewCreditRequest - A method used by employeeBankUser to review credit requests from customerBankUser
     * @param user customerBankUser whose line of credit application is being reviewed
     * @return String which will contain the credit rating based on the customerBankUser's creditScore
     * @throws AccountNotExistException if user does not own any accounts
     * @throws ApplicationNotSentException if user did not send out a line of credit application (user's LOC is still
     * false)
     */
    @Override
    public String reviewCreditRequest(CustomerBankUser user) throws AccountNotExistException, ApplicationNotSentException{

        /**
         * Bank customer needs to have at least one bank account in order to review credit requests, and there is no
         * need for a null check because boolean is a primitive type, and there are only two methods that changes the
         * lineOfCredit value:
         *
         *     1) setLineOfCredit method in class CustomerBankUser, where it's only usage is this method
         *     2) reviewCreditRequest method in this class EmployeeBankUserServiceImpl, where all it does is reset
         *     customer's "lineOfCredit" back to false after it returns a credit rating
         */
        if(!user.getAccounts().isEmpty()){
            if(user.getLineOfCredit()){
                switch(user.getCreditScore()/100){
                    case 0: case 1: case 2:
                        logger.debug("Bad credit");
                        user.setLineOfCredit(false);
                        return "Due to your bad credit, you are denied a line of credit";
                    case 3: case 4: case 5:
                        logger.debug("Poor credit");
                        user.setLineOfCredit(false);
                        return "Due to your poor credit, your line of credit needs a review and interest will be set at 20%";
                    case 6: case 7: case 8:
                        logger.debug("Good credit");
                        user.setLineOfCredit(false);
                        return "Due to your good credit, your line of credit is automatically approved and interest will be set at 10%";
                    case 9: case 10:
                        logger.debug("Excellent credit");
                        user.setLineOfCredit(false);
                        return "Due to your excellent credit, your line of credit is automatically approved and interest will be set at 7%";
                }
            }
            user.setLineOfCredit(false);
            throw new ApplicationNotSentException("You have not applied for a line of credit");
        }
        user.setLineOfCredit(false);
        throw new AccountNotExistException("You have no accounts with this bank");
    }

    /**
     * createNewAccount - A method used by employeeBankUser to create new bank accounts for customerBankUsers
     * @param user customerBankUser who will receive the new bank account generated by the employeeBankUser
     * @param newAccount the name of the newly generated customerBankUser's account
     * @throws AccountNotExistException if user does not own any accounts
     * @throws ApplicationNotSentException if user did not send out a line of credit application (user's LOC is still
     * false)
     */
    @Override
    public void createNewAccount(CustomerBankUser user, String newAccount) throws UserNotFoundException, DuplicateFoundException {

        Set<Integer> setOfIds = new HashSet<Integer>();
        Set<String> setOfAccountTypes = new HashSet<String>();

        //Null check
        if(user == null){
            throw new UserNotFoundException("Cannot attach account to a non-existing user");
        }

        /***
         * Make sure there are no duplicate IDs or account names by using a hashset for each, and adding each ID
         * into the set. If the size of the set is less than the size of list of bank accounts, it means there is a
         * duplicate ID somewhere (which will need to be dealt with before moving forward)
         *
         * P.S. A set does not take in duplicates, so if the sizes are the same, it means all entries are different
         */
        for(int i=0; i<user.getAccounts().size(); i++){
            setOfIds.add(user.getAccounts().get(i).getId());
            setOfAccountTypes.add(user.getAccounts().get(i).getAccountType());

            //This double checks that the accountType in each bank account is not the same as the new account's name
            if(user.getAccounts().get(i).getAccountType().equals(newAccount)){
                throw new DuplicateFoundException("Cannot create new account with the same name");
            }
        }

        logger.debug("size of setOfIds: "+setOfIds.size());
        logger.debug("size of setOfAccountTypes: " + setOfAccountTypes.size());

        /**
         * When creating new account, account ID will be increment from the last account ID (For example, if chequing
         * is id=1 and savings is id=2, the new bank account will have id=3); otherwise, an exception will be thrown
         */
        if(setOfIds.size() != user.getAccounts().size()){
            throw new DuplicateFoundException("Cannot create new account until duplicate account IDs are resolved");
        }
        else if(setOfAccountTypes.size() != user.getAccounts().size()) {
            throw new DuplicateFoundException("Cannot create new account until duplicate account names are resolved");
        } else{
            user.getAccounts().add(new BankAccount(user.getAccounts().size()+1, newAccount));
        }
    }
}
